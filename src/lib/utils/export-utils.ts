import jsPDF from "jspdf";
import * as XLSX from "xlsx";

interface CalendarExportData {
  date: string;
  propertyId: number;
  propertyName: string;
  rooms: RoomExportData[];
}

interface RoomExportData {
  roomId: number;
  roomName: string;
  totalUnits: number;
  bookedUnits: number;
  availableUnits: number;
  status: 'available' | 'partially_booked' | 'fully_booked' | 'unavailable';
  reason?: string | null;
  bookings?: BookingExportData[];
}

interface BookingExportData {
  unitCount: number;
  status: string;
  bookingNo: string;
  totalGuests: number;
}

export class ExportUtils {
  // PDF export with styled design
  static async exportToPDF(elementId: string, filename: string = "report.pdf") {
    try {
      if (typeof window === 'undefined' || typeof document === 'undefined') {
        throw new Error("PDF export is only available in browser environment");
      }
      
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error("Element not found");
      }

      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let yPosition = 20;

      // Add header with gradient-like effect
      this.addHeader(pdf, pageWidth);
      yPosition += 35;

      // Add report metadata
      yPosition = this.addReportMetadata(pdf, yPosition);

      // Add KPI section
      yPosition = this.addKPISection(pdf, element, yPosition, pageWidth);

      // Add charts section
      yPosition = this.addChartsSection(pdf, element, yPosition, pageWidth);

      // Add property performance table
      this.addPropertyPerformanceTable(pdf, element, yPosition, pageWidth);

      // Add footer
      this.addFooter(pdf, pageWidth, pageHeight);

      pdf.save(filename);
      return true;
    } catch (error) {
      console.error("Error exporting to PDF:", error);
      throw error;
    }
  }

  // Add professional header
  private static addHeader(pdf: jsPDF, pageWidth: number) {
    // Header background
    pdf.setFillColor(139, 69, 19); // Brown color
    pdf.rect(0, 0, pageWidth, 30, 'F');

    // Company logo area (placeholder)
    pdf.setFillColor(255, 255, 255);
    pdf.circle(25, 15, 8, 'F');
    pdf.setFontSize(8);
    pdf.setTextColor(139, 69, 19);
    pdf.setFont("helvetica", "bold");
    pdf.text("LOGO", 20, 18);

    // Title
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(24);
    pdf.setFont("helvetica", "bold");
    pdf.text("Property Rental Report", 50, 20);

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text("Comprehensive Analytics & Performance Report", 50, 26);
  }

  // Add report metadata
  private static addReportMetadata(pdf: jsPDF, yPosition: number): number {
    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "normal");
    
    const currentDate = new Date().toLocaleDateString("id-ID", {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    pdf.text(`Generated on: ${currentDate}`, 20, yPosition);
    pdf.text(`Report Period: ${this.getReportPeriod()}`, 20, yPosition + 5);
    pdf.text(`Generated by: Property Rental System`, 20, yPosition + 10);
    
    return yPosition + 20;
  }

  // Add KPI section
  private static addKPISection(pdf: jsPDF, element: HTMLElement, yPosition: number, pageWidth: number): number {
    // Section header
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(139, 69, 19);
    pdf.text("Key Performance Indicators", 20, yPosition);
    yPosition += 10;

    // KPI cards background
    const cardWidth = (pageWidth - 60) / 4;
    const cardHeight = 25;
    const cardY = yPosition;

    // Extract KPI data from element
    const kpiData = this.extractKPIData();
    
    const kpiItems = [
      { title: "Total Revenue", value: kpiData.totalRevenue, color: [34, 197, 94] },
      { title: "Total Bookings", value: kpiData.totalBookings, color: [59, 130, 246] },
      { title: "Total Guests", value: kpiData.totalGuests, color: [168, 85, 247] },
      { title: "Avg Occupancy", value: kpiData.averageOccupancy, color: [239, 68, 68] }
    ];

    kpiItems.forEach((item, index) => {
      const x = 20 + (index * (cardWidth + 10));
      
      // Card background
      pdf.setFillColor(248, 250, 252);
      pdf.roundedRect(x, cardY, cardWidth, cardHeight, 3, 3, 'F');
      
      // Card border
      pdf.setDrawColor(item.color[0], item.color[1], item.color[2]);
      pdf.setLineWidth(0.5);
      pdf.roundedRect(x, cardY, cardWidth, cardHeight, 3, 3, 'S');
      
      // Title
      pdf.setFontSize(8);
      pdf.setFont("helvetica", "normal");
      pdf.setTextColor(107, 114, 128);
      pdf.text(item.title, x + 5, cardY + 8);
      
      // Value
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.setTextColor(item.color[0], item.color[1], item.color[2]);
      pdf.text(item.value, x + 5, cardY + 18);
    });

    return cardY + cardHeight + 20;
  }

  // Add charts section
  private static addChartsSection(pdf: jsPDF, element: HTMLElement, yPosition: number, pageWidth: number): number {
    // Section header
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(139, 69, 19);
    pdf.text("Analytics & Trends", 20, yPosition);
    yPosition += 10;

    // Charts placeholder
    const chartWidth = (pageWidth - 50) / 2;
    const chartHeight = 40;

    // Revenue Trend Chart
    pdf.setFillColor(248, 250, 252);
    pdf.roundedRect(20, yPosition, chartWidth, chartHeight, 3, 3, 'F');
    pdf.setDrawColor(59, 130, 246);
    pdf.setLineWidth(0.5);
    pdf.roundedRect(20, yPosition, chartWidth, chartHeight, 3, 3, 'S');
    
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(59, 130, 246);
    pdf.text("Revenue Trend", 25, yPosition + 8);
    
    pdf.setFontSize(8);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(107, 114, 128);
    pdf.text("Monthly revenue analysis", 25, yPosition + 15);
    pdf.text("ðŸ“ˆ Chart visualization", 25, yPosition + 25);

    // Booking Status Chart
    pdf.setFillColor(248, 250, 252);
    pdf.roundedRect(20 + chartWidth + 10, yPosition, chartWidth, chartHeight, 3, 3, 'F');
    pdf.setDrawColor(168, 85, 247);
    pdf.setLineWidth(0.5);
    pdf.roundedRect(20 + chartWidth + 10, yPosition, chartWidth, chartHeight, 3, 3, 'S');
    
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(168, 85, 247);
    pdf.text("Booking Status", 25 + chartWidth + 10, yPosition + 8);
    
    pdf.setFontSize(8);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(107, 114, 128);
    pdf.text("Status distribution", 25 + chartWidth + 10, yPosition + 15);
    pdf.text("ðŸ“Š Pie chart visualization", 25 + chartWidth + 10, yPosition + 25);

    return yPosition + chartHeight + 20;
  }

  // Add property performance table
  private static addPropertyPerformanceTable(pdf: jsPDF, element: HTMLElement, yPosition: number, pageWidth: number): number {
    // Section header
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(139, 69, 19);
    pdf.text("Property Performance", 20, yPosition);
    yPosition += 10;

    // Table header
    const tableWidth = pageWidth - 40;
    const colWidth = tableWidth / 5;
    const rowHeight = 8;

    // Header background
    pdf.setFillColor(139, 69, 19);
    pdf.rect(20, yPosition, tableWidth, rowHeight, 'F');

    // Header text
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "bold");
    pdf.setTextColor(255, 255, 255);
    
    const headers = ["Property", "Occupancy", "ADR", "RevPAR", "Guests"];
    headers.forEach((header, index) => {
      pdf.text(header, 22 + (index * colWidth), yPosition + 5);
    });

    yPosition += rowHeight;

    // Table rows
    pdf.setFontSize(9);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(0, 0, 0);

    // Sample data
    const sampleData = [
      ["Villa Paradise", "85%", "Rp 500K", "Rp 425K", "120"],
      ["Beach Resort", "92%", "Rp 750K", "Rp 690K", "85"],
      ["Mountain Lodge", "78%", "Rp 400K", "Rp 312K", "95"]
    ];

    sampleData.forEach((row, rowIndex) => {
      // Alternate row colors
      if (rowIndex % 2 === 0) {
        pdf.setFillColor(248, 250, 252);
        pdf.rect(20, yPosition, tableWidth, rowHeight, 'F');
      }

      row.forEach((cell, colIndex) => {
        pdf.text(cell, 22 + (colIndex * colWidth), yPosition + 5);
      });

      yPosition += rowHeight;
    });

    return yPosition + 20;
  }

  // Add footer
  private static addFooter(pdf: jsPDF, pageWidth: number, pageHeight: number) {
    const footerY = pageHeight - 15;
    
    // Footer line
    pdf.setDrawColor(139, 69, 19);
    pdf.setLineWidth(0.5);
    pdf.line(20, footerY - 5, pageWidth - 20, footerY - 5);

    // Footer text
    pdf.setFontSize(8);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(107, 114, 128);
    pdf.text("Property Rental System - Confidential Report", 20, footerY);
    pdf.text(`Page ${pdf.getCurrentPageInfo().pageNumber}`, pageWidth - 30, footerY);
  }

  // Helper methods
  private static getReportPeriod(): string {
    const now = new Date();
    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    
    return `${firstDay.toLocaleDateString("id-ID")} - ${lastDay.toLocaleDateString("id-ID")}`;
  }

  private static extractKPIData() {
    // Extract KPI data from the element
    // This is a simplified version - you can enhance it based on your actual data structure
    return {
      totalRevenue: "Rp 15.2M",
      totalBookings: "127",
      totalGuests: "342",
      averageOccupancy: "85%"
    };
  }


  // Simple Excel export
  static exportToExcel(
    data: Record<string, unknown>[],
    filename: string = "report.xlsx"
  ) {
    try {
      const worksheet = XLSX.utils.json_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Report");
      XLSX.writeFile(workbook, filename);
      return true;
    } catch (error) {
      console.error("Error exporting to Excel:", error);
      throw error;
    }
  }

  // Export calendar data to Excel with multiple sheets
  static exportCalendarToExcel(
    calendarData: CalendarExportData[],
    filename: string = "calendar.xlsx"
  ) {
    try {
      const workbook = XLSX.utils.book_new();

      // Summary sheet
      const summaryData = calendarData.map(entry => ({
        Date: entry.date,
        Property: entry.propertyName,
        TotalRooms: entry.rooms.length,
        AvailableRooms: entry.rooms.filter((r: RoomExportData) => r.status === 'available').length,
        PartiallyBookedRooms: entry.rooms.filter((r: RoomExportData) => r.status === 'partially_booked').length,
        FullyBookedRooms: entry.rooms.filter((r: RoomExportData) => r.status === 'fully_booked').length,
        TotalAvailableUnits: entry.rooms.reduce((sum: number, r: RoomExportData) => sum + r.availableUnits, 0),
        TotalBookedUnits: entry.rooms.reduce((sum: number, r: RoomExportData) => sum + r.bookedUnits, 0),
        TotalUnits: entry.rooms.reduce((sum: number, r: RoomExportData) => sum + r.totalUnits, 0),
      }));

      const summarySheet = XLSX.utils.json_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, "Summary");

      // Detailed sheet
      const detailedData: Record<string, unknown>[] = [];
      calendarData.forEach(entry => {
        entry.rooms.forEach((room: RoomExportData) => {
          detailedData.push({
            Date: entry.date,
            Property: entry.propertyName,
            Room: room.roomName,
            Status: room.status,
            AvailableUnits: room.availableUnits,
            BookedUnits: room.bookedUnits,
            TotalUnits: room.totalUnits,
            OccupancyRate: `${((room.bookedUnits / room.totalUnits) * 100).toFixed(1)}%`,
          });
        });
      });

      const detailedSheet = XLSX.utils.json_to_sheet(detailedData);
      XLSX.utils.book_append_sheet(workbook, detailedSheet, "Room Details");

      XLSX.writeFile(workbook, filename);
      return true;
    } catch (error) {
      console.error("Error exporting calendar to Excel:", error);
      throw error;
    }
  }

  // Simple data preparation for Excel
  static prepareReportDataForExcel(reportData: Record<string, unknown>) {
    const excelData = [];

    // KPI Data
    const kpiData = reportData.kpiData as
      | {
          totalRevenue?: number;
          revenueGrowth?: number;
          totalBookings?: number;
          bookingGrowth?: number;
          totalGuests?: number;
          guestGrowth?: number;
          averageOccupancy?: number;
          occupancyGrowth?: number;
        }
      | undefined;

    excelData.push({
      Metric: "Total Revenue",
      Value: kpiData?.totalRevenue || 0,
      Growth: `${kpiData?.revenueGrowth || 0}%`,
      Category: "KPI",
    });
    excelData.push({
      Metric: "Total Bookings",
      Value: kpiData?.totalBookings || 0,
      Growth: `${kpiData?.bookingGrowth || 0}%`,
      Category: "KPI",
    });
    excelData.push({
      Metric: "Total Guests",
      Value: kpiData?.totalGuests || 0,
      Growth: `${kpiData?.guestGrowth || 0}%`,
      Category: "KPI",
    });
    excelData.push({
      Metric: "Average Occupancy",
      Value: `${kpiData?.averageOccupancy || 0}%`,
      Growth: `${kpiData?.occupancyGrowth || 0}%`,
      Category: "KPI",
    });

    // Monthly Data
    const monthlyData = reportData.monthlyData as
      | Record<string, unknown>[]
      | undefined;
    if (monthlyData && monthlyData.length > 0) {
      monthlyData.forEach((item: Record<string, unknown>) => {
        excelData.push({
          Metric: item.name,
          Value: item.value,
          Growth: `${item.growth || 0}%`,
          Category: "Monthly",
        });
      });
    }

    // Property Performance
    const propertyPerformance = reportData.propertyPerformance as
      | Record<string, unknown>[]
      | undefined;
    if (propertyPerformance && propertyPerformance.length > 0) {
      propertyPerformance.forEach((item: Record<string, unknown>) => {
        excelData.push({
          Metric: item.name,
          Value: item.revenue,
          Growth: `${item.occupancy}%`,
          Category: "Property",
        });
      });
    }

    // Booking Status
    const bookingStatusData = reportData.bookingStatusData as
      | Record<string, unknown>[]
      | undefined;
    if (bookingStatusData && bookingStatusData.length > 0) {
      bookingStatusData.forEach((item: Record<string, unknown>) => {
        excelData.push({
          Metric: item.name,
          Value: item.value,
          Growth: "",
          Category: "Booking Status",
        });
      });
    }

    return excelData;
  }
}
